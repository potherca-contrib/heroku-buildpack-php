#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

################################################################################
# Potherca Custom Heroku Compile script for PHP apps with Composer Dependencies
# ------------------------------------------------------------------------------
# Sometimes the standards are just not what you need, so I am hacking my own.
#
# The default (and most custom) PHP buildpacks place the entire application in
# the web root directory of the application.
#
# I don't like that, since I tend to have my applications setup more neatly, so
# this buildpack will keep the entire application AS IS and assumes you have the
# decency to place your public files in a web root, either named `www` or `web`
# or `html`.
#
# Some notes on Heroku Buildpacks:
#
# BUILD_DIR will be the location of the app and CACHE_DIR will be a location the
# buildpack can use to cache build artifacts between builds. As the contents of
# CACHE_DIR will be persisted between builds, you can cache the results of long
# processes like dependency resolution here to speed up future builds.
#
# The application in BUILD_DIR along with all changes made by the compile script
# will be packaged into a slug
#
# All output received on STDOUT from this script will be displayed to the user.
#
# For full details see https://devcenter.heroku.com/articles/buildpack-api
################################################################################


# ==============================================================================
# CONFIG
# ------------------------------------------------------------------------------
set -e  # fail fast
#set -x #debug
# ==============================================================================


# ==============================================================================
# Possible Directory Names for the DocumentRoot
# ------------------------------------------------------------------------------
g_aPossibleDocumentRoots=('www web html public')
g_sDocumentRoot=''
# ==============================================================================


# ==============================================================================
# Location to grab binaries from
# ------------------------------------------------------------------------------
sTarbalUrl='https://heroku-buildpack-php.s3.amazonaws.com'
# ==============================================================================


# ==============================================================================
# Versions to grab
# ------------------------------------------------------------------------------
APACHE_VERSION="2.2.25"
MCRYPT_VERSION="2.5.8"
PHP_VERSION="5.3.27"
# ==============================================================================


# ==============================================================================
# Heroku Revision.
#
# Affixed to all vendored binary output to represent changes to the
# compilation environment without a change to the upstream version,
# e.g. PHP 5.3.27 without, and then subsequently with, libmcrypt.
# ------------------------------------------------------------------------------
heroku_rev='2'
# ==============================================================================


# ==============================================================================
# ------------------------------------------------------------------------------
BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
# ==============================================================================


# ==============================================================================
# ------------------------------------------------------------------------------
APACHE_PATH="apache"
APACHE_URL="${sTarbalUrl}/apache-${APACHE_VERSION}-${heroku_rev}.tar.gz"
# ==============================================================================


# ==============================================================================
# ------------------------------------------------------------------------------
MCRYPT_URL="${sTarbalUrl}/mcrypt-${MCRYPT_VERSION}-${heroku_rev}.tar.gz"
# ==============================================================================


# ==============================================================================
# ------------------------------------------------------------------------------
PHP_PATH="php" # @CHECKME: Unused variable. Why?
PHP_URL="${sTarbalUrl}/php-${PHP_VERSION}-${heroku_rev}.tar.gz"
# ==============================================================================


################################################################################
# FUNCTIONS
################################################################################

# ==============================================================================
# Check if a value exists in an array
# ------------------------------------------------------------------------------
# @param $1 mixed  Needle
# @param $2 array  Haystack
# @return  Success (0) if value exists, Failure (1) otherwise
# Usage: in_array "$needle" "${haystack[@]}"
# See: http://fvue.nl/wiki/Bash:_Check_if_array_element_exists
# ------------------------------------------------------------------------------
in_array(){
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}
# ==============================================================================


# ==============================================================================
# Output some system information
# ------------------------------------------------------------------------------
function echoInfo(){
    echo '# =============================================================================='
    echo "BIN_DIR   = ${BIN_DIR}"
    echo "BUILD_DIR = ${BUILD_DIR}"
    echo "CACHE_DIR = ${CACHE_DIR}"
    echo "LP_DIR    = ${LP_DIR}"
    echo "HOME      = ${HOME}"
    echo "pwd       = `pwd`"
    echo '# ------------------------------------------------------------------------------'
}
# ==============================================================================


# ==============================================================================
# Prepare for action
# ------------------------------------------------------------------------------
function preRun(){
    echo '=====> Preparing...'
    echoInfo

    setDocumentRoot

    # include .files when moving things around
    shopt -s dotglob

    # go to the start
    cd $BUILD_DIR
}
# ==============================================================================


# ==============================================================================
# Prepare for action
# ------------------------------------------------------------------------------
function setDocumentRoot(){
    findDocumentRoot

    if [ "${g_sDocumentRoot}" eq '' ]; then
        echo "-----> Could not find DocumentRoot"
        echo ""
        echo "CAN NOT PROCEED WITHOUT DOCUMENTROOT. ABORTING."
        exit 1
    fi
}
# ==============================================================================


# ==============================================================================
# move app things to www
# ------------------------------------------------------------------------------
function moveAppToWebRoot(){
    echo "-----> Moving Project Files to Build Dir"
    mv "${CACHE_DIR}" "${BUILD_DIR}"
}
# ==============================================================================


# ==============================================================================
# Install Apache
# ------------------------------------------------------------------------------
function installApache(){
    install 'Apache' "${APACHE_VERSION}" "${APACHE_URL}"
}
# ==============================================================================


# ==============================================================================
# Install PHP
# ------------------------------------------------------------------------------
function installPhp(){
    install 'PHP' "${PHP_VERSION}" "${PHP_URL}"
}
# ==============================================================================


# ==============================================================================
# Install PHP
# ------------------------------------------------------------------------------
function installMcrypt(){
    install 'mcrypt' "${MCRYPT_VERSION}" "$MCRYPT_URL"
}
# ==============================================================================


# ==============================================================================
# Install PHP
# ------------------------------------------------------------------------------
function install(){
    echo "-----> Bundling ${1} version ${2}"
    curl --silent --max-time 60 --location "${3}" | tar xz
}
# ==============================================================================


# ==============================================================================
# Tries to find out the name of the public web dir
# ------------------------------------------------------------------------------
function findDocumentRoot(){
    echo "-----> Looking for DocumentRoot"

    for sDirectory in ${g_aPossibleDocumentRoots}; do
        if [ -d "${BUILD_DIR}/${sDirectory}" ]; then
            g_sDocumentRoot="/app/${sDirectory}/"
            echo "-----> Found DocumentRoot '${g_sDocumentRoot}'"
            break
        fi
    done
}
# ==============================================================================


# ==============================================================================
# update config files
# ------------------------------------------------------------------------------
function updateConfig(){

    echo "-----> Updating config files"
    cp "${LP_DIR}/conf/httpd.conf" "${APACHE_PATH}/conf"
    cp "${LP_DIR}/conf/DocumentRoot.conf" "${APACHE_PATH}/conf"
    cp "${LP_DIR}/conf/php.ini" "${PHP_PATH}"

    echo "-----> Updating DocumentRoot in Config File"
    echo "DocumentRoot \"${sDocumentRoot}\"" > "${APACHE_PATH}/conf/DocumentRoot.conf"
}
# ==============================================================================


# ==============================================================================
# make php available on bin
# ------------------------------------------------------------------------------
function linkBinaries(){
    echo "-----> Linking binaries"
    mkdir -p bin
    ln -s /app/php/bin/php bin/php
}
# ==============================================================================


# ==============================================================================
# check if we have Composer dependencies and vendors are not bundled
# ------------------------------------------------------------------------------
function runComposer(){
    echo "-----> Checking for Composer dependencies"
    if [ -f www/composer.json ] && [ ! -d www/vendor ]; then
        echo "       -----> Composer dependencies found"
        COMPOSER_URL="http://getcomposer.org/composer.phar"
        GIT_DIR_ORIG=$GIT_DIR
        unset GIT_DIR

        echo "       -----> Fetching Composer"
        curl --silent --max-time 60 --location "$COMPOSER_URL" > www/composer.phar
        cd www

        echo "       -----> Running Composer "
        # @NOTE: We need to point LD_LIBRARY_PATH to where the mcrypt.so is so PHP can find it
        #        Otherwise is will crash stating "error while loading shared libraries: libmcrypt.so.4: cannot open shared object file: No such file or directory"
        LD_LIBRARY_PATH=$BUILD_DIR/vendor/mcrypt/lib ${BUILD_DIR}/php/bin/php -c $LP_DIR/conf/php.ini \
            composer.phar install  --verbose --prefer-source --optimize-autoloader --no-interaction --no-dev

        echo "       -----> Cleaning up after Composer"
        rm -rf vendor/**/.git
        cd $BUILD_DIR
        rm www/composer.phar
        export GIT_DIR=$GIT_DIR_ORIG
    else
        echo "       -----> No Composer dependencies found"
    fi
}
# ==============================================================================


# ==============================================================================
# Setup boot file that runs our web worker
# ------------------------------------------------------------------------------
function createBootScript(){
    echo "-----> Creating boot script"
    # @FIXME: We should check the project files for post-install/boot commands and add those too!
    cat >> boot.sh <<EOF
    echo "=====> Running Boot Script"

    for var in \`env|cut -f1 -d=\`; do
      echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
    done
    touch /app/apache/logs/error_log
    touch /app/apache/logs/access_log
    tail -F /app/apache/logs/error_log &
    tail -F /app/apache/logs/access_log &
    export LD_LIBRARY_PATH=/app/php
    export PHP_INI_SCAN_DIR=/app/www
    echo "Launching Apache"
    exec /app/apache/bin/httpd -DNO_DETACH
EOF

    chmod +x boot.sh
}
# ==============================================================================


# ==============================================================================
# Clean up after ourselves
# ------------------------------------------------------------------------------
function postRun(){
	echo '=====> Cleaning Up'
    # clean the cache
    #rm -rf $CACHE_DIR/*
}
# ==============================================================================


# ==============================================================================
# On your places... Set... Go!
# ------------------------------------------------------------------------------
function run (){
    echo "=====> Running Install"
    moveAppToWebRoot

    installMcrypt
    installApache
    installPhp

    updateConfig
    linkBinaries

    runComposer

    createBootScript
}
# ==============================================================================

echo "=====> Running Script ${0}"

preRun
run
postRun

#EOF