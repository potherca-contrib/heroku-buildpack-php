#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

################################################################################
# Potherca Custom Heroku Boot script
# ------------------------------------------------------------------------------
# Sometimes the standards are just not what you need, so I am hacking my own.
################################################################################


# ==============================================================================
# CONFIG
# ------------------------------------------------------------------------------
# fail fast
set -e
#set -x
# ==============================================================================


# ==============================================================================
# The files in the project root we don't want moved to the root
# ------------------------------------------------------------------------------
# @FIXME: Any files that need to remain in /app/www that are not in /app/www/web need to be read from a file in the project
declare -a aKeep
#aKeep+=('.buildpacks')
#aKeep+=('.profile.d')
#aKeep+=('vendor')
#aKeep+=('last_pack_release.out')
# ==============================================================================

# ==============================================================================
# ------------------------------------------------------------------------------
APACHE_VERSION="2.2.22"
APACHE_PATH="apache"
APACHE_URL="https://s3.amazonaws.com/php-lp/apache-$APACHE_VERSION.tar.gz"
# ==============================================================================


# ==============================================================================
# ------------------------------------------------------------------------------
PHP_VERSION="5.3.10"
PHP_PATH="php"
PHP_URL="https://s3.amazonaws.com/php-lp/php-$PHP_VERSION.tar.gz"
# ==============================================================================


# ==============================================================================
# ------------------------------------------------------------------------------
BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
# ==============================================================================

################################################################################
# FUNCTIONS
################################################################################
# ==============================================================================
# Check if a value exists in an array
# ------------------------------------------------------------------------------
# @param $1 mixed  Needle  
# @param $2 array  Haystack
# @return  Success (0) if value exists, Failure (1) otherwise
# Usage: in_array "$needle" "${haystack[@]}"
# See: http://fvue.nl/wiki/Bash:_Check_if_array_element_exists
# ------------------------------------------------------------------------------
in_array(){
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}
# ==============================================================================



# ==============================================================================
# Prepare for action
# ------------------------------------------------------------------------------
function preRun(){
	echo '=====> Preparing...'
    # include .files when moving things around
    shopt -s dotglob

    # go to the start
    cd $BUILD_DIR
}
# ==============================================================================


function keep() {
    echo "----->     Attempt to move ${1}"
    if [ -f "www/${1}" ]; then
        mv -v --target-directory="${HOME}/" "www/${1}"
    elif [ -d "www/${1}" ]; then
        mv -v --target-directory="${HOME}/" "www/${1}"
    else
        echo "----->          !     FAILED TO MOVE ${1} to ${HOME}"
    fi
}
# ==============================================================================
# move app things to www
# ------------------------------------------------------------------------------
function moveAppToWebRoot(){
    echo "-----> Moving Project Files"
    mkdir -p "${CACHE_DIR}/www"

    if [ -d "www/" ]; then
        echo "     -----> Moving `pwd`/www/* to `pwd`"
        #mv -v --target-directory="." "www/*"
        mv -v "./www/*" "./*"
    else
        echo "     ERROR> Could not find a 'www' directory in `pwd`"
    fi

    #for sItem in $( ls ); do
    #    in_array "${sItem}" "${aKeep[@]}" || mv "${sItem}" "${CACHE_DIR}/www"
    #done

    #mv $CACHE_DIR/www .

    # keep Procfile
    #if [ -f www/Procfile ]; then
    #  mv www/Procfile .
    #fi
}
# ==============================================================================


# ==============================================================================
# Install Apache
# ------------------------------------------------------------------------------
function installApache(){
    echo "-----> Bundling Apache version ${APACHE_VERSION}"
    curl --silent --max-time 60 --location "${APACHE_URL}" | tar xz
}
# ==============================================================================


# ==============================================================================
# Install PHP
# ------------------------------------------------------------------------------
function installPhp(){
    echo "-----> Bundling PHP version ${PHP_VERSION}"
    curl --silent --max-time 60 --location "${PHP_URL}" | tar xz
}
# ==============================================================================


# ==============================================================================
# update config files
# ------------------------------------------------------------------------------
function updateConfig(){
    echo "-----> Updating config files"
    cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
    cp $LP_DIR/conf/php.ini php
}
# ==============================================================================


# ==============================================================================
# make php available on bin
# ------------------------------------------------------------------------------
function linkBinaries(){
    echo "-----> Linking binaries"
    mkdir -p bin
    ln -s /app/php/bin/php bin/php
}
# ==============================================================================


# ==============================================================================
# check if we have Composer dependencies and vendors are not bundled
# ------------------------------------------------------------------------------
function runComposer(){
      echo "-----> Checking for Composer dependencies"
    if [ -f www/composer.json ] && [ ! -d www/vendor ]; then
      echo "       -----> Composer dependencies found"
      GIT_DIR_ORIG=$GIT_DIR
      unset GIT_DIR
      COMPOSER_URL="http://getcomposer.org/composer.phar"

      echo "       -----> Fetching Composer"
      curl --silent --max-time 60 --location "$COMPOSER_URL" > www/composer.phar
      cd www

      echo "       -----> Running Composer"
      LD_LIBRARY_PATH=$BUILD_DIR/php/ext
      $BUILD_DIR/php/bin/php -c $LP_DIR/conf/php.ini composer.phar install --prefer-source

      echo "       -----> Cleaning up after Composer"
      rm -rf vendor/**/.git
      cd $BUILD_DIR
      rm www/composer.phar
      export GIT_DIR=$GIT_DIR_ORIG
    fi
}
# ==============================================================================


# ==============================================================================
# Setup boot file that runs our web worker
# ------------------------------------------------------------------------------
function createBootScript(){
    echo "-----> Creating boot script"
    # @FIXME: We should check the project files for post-install/boot commands and add those too!
    cat >> boot.sh <<EOF
    echo "=====> Running Script ${0}"

    for var in \`env|cut -f1 -d=\`; do
      echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
    done
    touch /app/apache/logs/error_log
    touch /app/apache/logs/access_log
    tail -F /app/apache/logs/error_log &
    tail -F /app/apache/logs/access_log &
    export LD_LIBRARY_PATH=/app/php/ext
    export PHP_INI_SCAN_DIR=/app/www
    echo "Launching apache"
    exec /app/apache/bin/httpd -DNO_DETACH
EOF

    chmod +x boot.sh
}
# ==============================================================================


# ==============================================================================
# Clean up after ourselves
# ------------------------------------------------------------------------------
function postRun(){
	echo '=====> Cleaning Up'
    # clean the cache
    #rm -rf $CACHE_DIR/*
} 
# ==============================================================================


# ==============================================================================
# On your places... Set... Go!
# ------------------------------------------------------------------------------
function run (){
    echo "=====> Running Install"
    moveAppToWebRoot

    installApache
    installPhp
    
    updateConfig
    linkBinaries

    runComposer

    createBootScript
}
# ==============================================================================

echo "=====> Running Script ${0}"
echo '# =============================================================================='
echo "BIN_DIR   = ${BIN_DIR}"
echo "BUILD_DIR = ${BUILD_DIR}"
echo "CACHE_DIR = ${CACHE_DIR}"
echo "LP_DIR    = ${LP_DIR}"
echo "HOME      = ${HOME}"
echo "GIT_DIT   = ${GIT_DIR}"
echo "pwd       = `pwd`"
echo '# ------------------------------------------------------------------------------'

preRun
run
postRun

#EOF